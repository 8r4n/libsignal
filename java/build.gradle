plugins {
    id "base"
    id "de.undercouch.download" version "5.0.2"
    id "com.diffplug.spotless" version "6.20.0"
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
}

allprojects {
    version = "0.31.0"
    group   = "org.signal"
}

subprojects {
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.encoding = 'UTF-8'
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    allprojects {
        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
            options.compilerArgs += ["-Xlint:deprecation", "-Xlint:fallthrough", "-Xlint:unchecked"]
        }
    }

    apply plugin: "com.diffplug.spotless"
    spotless {
        java {
            target('**/*.java')
            targetExclude('**/Native.java')
            importOrder()
            removeUnusedImports()

            googleJavaFormat()
            formatAnnotations()
            licenseHeaderFile rootProject.file('license_header.txt')
        }
    }
}

task makeJniLibrariesDesktop(type:Exec) {
  group 'Rust'
  description 'Build the JNI libraries'

  // Explicitly specify 'bash' for Windows compatibility.
  commandLine 'bash', './build_jni.sh', 'desktop'
}

task cargoClean(type:Exec) {
  group 'Rust'
  commandLine 'cargo', 'clean'
}

task cleanJni(type: Delete) {
  description 'Clean JNI libs'
  delete fileTree('./android/src/main/jniLibs') {
    include '**/*.so'
  }
  delete fileTree('./shared/resources') {
    include '**/*.so'
    include '**/*.dylib'
    include '**/*.dll'
  }
}

clean.dependsOn([cargoClean, cleanJni])

task downloadNonLinuxLibraries(type: Download) {
  // Must be explicitly enabled.
  enabled false

  def extraResources = ['signal_jni.dll', 'libsignal_jni.dylib']

  src(extraResources.collect {
    'https://github.com/signalapp/libsignal/releases/download/v' + version + '/' + it
  })
  dest 'shared/resources'
}

// PUBLISHING

nexusPublishing {
    repositories {
        sonatype {
            username = project.hasProperty('sonatypeUsername') ? sonatypeUsername : ""
            password = project.hasProperty('sonatypePassword') ? sonatypePassword : ""
        }
    }
}

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

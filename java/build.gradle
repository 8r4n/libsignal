plugins {
    id "de.undercouch.download" version "5.0.2"
}

def version_number = "0.13.0"

subprojects {
    ext.version_number     = version_number
    ext.group_info         = "org.whispersystems"

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
}

task makeJniLibrariesAndroid(type:Exec) {
  group 'Rust'
  description 'Build the JNI libraries'

  commandLine './build_jni.sh', 'android'
}

task makeJniLibrariesDesktop(type:Exec) {
  group 'Rust'
  description 'Build the JNI libraries'

  commandLine './build_jni.sh', 'desktop'
}

task makeAll() {
  group 'Rust'
  description 'Build the native libraries'

  dependsOn 'makeJniLibrariesDesktop', 'makeJniLibrariesAndroid'
}

task cargoClean(type:Exec) {
  group 'Rust'
  commandLine 'cargo', 'clean'
}

task clean(type: Delete) {
  description 'Clean JNI libs'
  delete fileTree('./android/src/main/jniLibs') {
    include '**/*.so'
  }
  delete fileTree('./shared/resources') {
    include '**/*.so'
    include '**/*.dylib'
    include '**/*.dll'
  }
}
clean.dependsOn(cargoClean)

task downloadNonLinuxLibraries(type: Download) {
  def extraResources = ['signal_jni.dll', 'libsignal_jni.dylib']

  src(extraResources.collect {
    'https://github.com/signalapp/libsignal-client/releases/download/v' + version_number + '/' + it
  })
  dest 'shared/resources'
}

// PUBLISHING

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('sonatypeRepo') ? sonatypeRepo
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getRepositoryUsername() {
    return hasProperty('whisperSonatypeUsername') ? whisperSonatypeUsername : ""
}

def getRepositoryPassword() {
    return hasProperty('whisperSonatypePassword') ? whisperSonatypePassword : ""
}

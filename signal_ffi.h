/*
Copyright (C) 2020 Signal Messenger, LLC.
All rights reserved.

SPDX-License-Identifier: GPL-3.0-only
*/


#ifndef SIGNAL_FFI_H_
#define SIGNAL_FFI_H_

/* This file was automatically generated by cbindgen */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum {
  SIGNAL_ERROR_CODE_UNKNOWN_ERROR = 1,
  SIGNAL_ERROR_CODE_INVALID_STATE = 2,
  SIGNAL_ERROR_CODE_INTERNAL_ERROR = 3,
  SIGNAL_ERROR_CODE_NULL_PARAMETER = 4,
  SIGNAL_ERROR_CODE_INVALID_ARGUMENT = 5,
  SIGNAL_ERROR_CODE_INVALID_TYPE = 6,
  SIGNAL_ERROR_CODE_INVALID_UTF8_STRING = 7,
  SIGNAL_ERROR_CODE_INSUFFICIENT_OUTPUT_SIZE = 8,
  SIGNAL_ERROR_CODE_PROTOBUF_ERROR = 10,
  SIGNAL_ERROR_CODE_INVALID_CIPHERTEXT = 20,
  SIGNAL_ERROR_CODE_LEGACY_CIPHERTEXT_VERSION = 21,
  SIGNAL_ERROR_CODE_UNKNOWN_CIPHERTEXT_VERSION = 22,
  SIGNAL_ERROR_CODE_UNRECOGNIZED_MESSAGE_VERSION = 23,
  SIGNAL_ERROR_CODE_INVALID_MESSAGE = 30,
  SIGNAL_ERROR_CODE_INVALID_KEY = 40,
  SIGNAL_ERROR_CODE_INVALID_SIGNATURE = 41,
  SIGNAL_ERROR_CODE_FINGERPRINT_IDENTIFIER_MISMATCH = 50,
  SIGNAL_ERROR_CODE_FINGERPRINT_VERSION_MISMATCH = 51,
  SIGNAL_ERROR_CODE_UNTRUSTED_IDENTITY = 60,
  SIGNAL_ERROR_CODE_INVALID_KEY_IDENTIFIER = 70,
  SIGNAL_ERROR_CODE_SESSION_NOT_FOUND = 80,
  SIGNAL_ERROR_CODE_DUPLICATED_MESSAGE = 90,
  SIGNAL_ERROR_CODE_CALLBACK_ERROR = 100,
} SignalErrorCode;

typedef struct Fingerprint Fingerprint;

typedef struct PreKeyBundle PreKeyBundle;

typedef struct PreKeyRecord PreKeyRecord;

typedef struct PreKeySignalMessage PreKeySignalMessage;

typedef struct PrivateKey PrivateKey;

typedef struct ProtocolAddress ProtocolAddress;

typedef struct PublicKey PublicKey;

typedef struct SenderKeyDistributionMessage SenderKeyDistributionMessage;

typedef struct SenderKeyMessage SenderKeyMessage;

typedef struct SenderKeyName SenderKeyName;

typedef struct SenderKeyRecord SenderKeyRecord;

typedef struct SessionRecord SessionRecord;

typedef struct SignalFfiError SignalFfiError;

typedef struct SignalMessage SignalMessage;

typedef struct SignedPreKeyRecord SignedPreKeyRecord;

typedef int (*LoadSession)(void*, SessionRecord**, const ProtocolAddress*, void*);

typedef int (*StoreSession)(void*, const ProtocolAddress*, const SessionRecord*, void*);

typedef struct {
  void *ctx;
  LoadSession load_session;
  StoreSession store_session;
} FfiSessionStoreStruct;

typedef int (*GetIdentityKeyPair)(void*, PrivateKey**, void*);

typedef int (*GetLocalRegistrationId)(void*, uint32_t*, void*);

typedef int (*SaveIdentityKey)(void*, const ProtocolAddress*, const PublicKey*, void*);

typedef int (*GetIdentityKey)(void*, PublicKey**, const ProtocolAddress*, void*);

typedef int (*IsTrustedIdentity)(void*, const ProtocolAddress*, const PublicKey*, unsigned int, void*);

typedef struct {
  void *ctx;
  GetIdentityKeyPair get_identity_key_pair;
  GetLocalRegistrationId get_local_registration_id;
  SaveIdentityKey save_identity;
  GetIdentityKey get_identity;
  IsTrustedIdentity is_trusted_identity;
} FfiIdentityKeyStoreStruct;

typedef int (*LoadPreKey)(void*, PreKeyRecord**, uint32_t, void*);

typedef int (*StorePreKey)(void*, uint32_t, const PreKeyRecord*, void*);

typedef int (*RemovePreKey)(void*, uint32_t, void*);

typedef struct {
  void *ctx;
  LoadPreKey load_pre_key;
  StorePreKey store_pre_key;
  RemovePreKey remove_pre_key;
} FfiPreKeyStoreStruct;

typedef int (*LoadSignedPreKey)(void*, SignedPreKeyRecord**, uint32_t, void*);

typedef int (*StoreSignedPreKey)(void*, uint32_t, const SignedPreKeyRecord*, void*);

typedef struct {
  void *ctx;
  LoadSignedPreKey load_signed_pre_key;
  StoreSignedPreKey store_signed_pre_key;
} FfiSignedPreKeyStoreStruct;

typedef int (*LoadSenderKey)(void*, SenderKeyRecord**, const SenderKeyName*, void*);

typedef int (*StoreSenderKey)(void*, const SenderKeyName*, const SenderKeyRecord*, void*);

typedef struct {
  void *ctx;
  LoadSenderKey load_sender_key;
  StoreSenderKey store_sender_key;
} FfiSenderKeyStoreStruct;

void signal_print_ptr(const void *p);

void signal_free_string(const char *buf);

void signal_free_buffer(const unsigned char *buf, size_t buf_len);

SignalFfiError *signal_error_get_message(const SignalFfiError *err, const char **out);

uint32_t signal_error_get_type(const SignalFfiError *err);

void signal_error_free(SignalFfiError *err);

SignalFfiError *signal_hkdf_derive(unsigned char *output,
                                   size_t output_length,
                                   int version,
                                   const unsigned char *input_key_material,
                                   size_t input_key_material_len,
                                   const unsigned char *salt,
                                   size_t salt_len,
                                   const unsigned char *info,
                                   size_t info_len);

SignalFfiError *signal_address_new(ProtocolAddress **address,
                                   const char *name,
                                   unsigned int device_id);

SignalFfiError *signal_address_get_name(const ProtocolAddress *obj, const char **out);

SignalFfiError *signal_address_get_device_id(const ProtocolAddress *obj, unsigned int *out);

SignalFfiError *signal_address_destroy(ProtocolAddress *p);

SignalFfiError *signal_publickey_deserialize(PublicKey **p,
                                             const unsigned char *data,
                                             size_t data_len);

SignalFfiError *signal_publickey_serialize(const PublicKey *obj,
                                           const unsigned char **out,
                                           size_t *out_len);

SignalFfiError *signal_publickey_compare(int32_t *result,
                                         const PublicKey *key1,
                                         const PublicKey *key2);

SignalFfiError *signal_publickey_verify(const PublicKey *key,
                                        unsigned char *result,
                                        const unsigned char *message,
                                        size_t message_len,
                                        const unsigned char *signature,
                                        size_t signature_len);

SignalFfiError *signal_publickey_destroy(PublicKey *p);

SignalFfiError *signal_privatekey_deserialize(PrivateKey **p,
                                              const unsigned char *data,
                                              size_t data_len);

SignalFfiError *signal_privatekey_serialize(const PrivateKey *obj,
                                            const unsigned char **out,
                                            size_t *out_len);

SignalFfiError *signal_privatekey_generate(PrivateKey **key);

SignalFfiError *signal_privatekey_get_public_key(PublicKey **new_obj, const PrivateKey *obj);

SignalFfiError *signal_privatekey_sign(const unsigned char **signature,
                                       size_t *signature_len,
                                       const PrivateKey *key,
                                       const unsigned char *message,
                                       size_t message_len);

SignalFfiError *signal_privatekey_agree(const unsigned char **shared_secret,
                                        size_t *shared_secret_len,
                                        const PrivateKey *private_key,
                                        const PublicKey *public_key);

SignalFfiError *signal_privatekey_destroy(PrivateKey *p);

SignalFfiError *signal_identitykeypair_serialize(const unsigned char **output,
                                                 size_t *output_len,
                                                 const PrivateKey *private_key,
                                                 const PublicKey *public_key);

SignalFfiError *signal_identitykeypair_deserialize(PrivateKey **private_key,
                                                   PublicKey **public_key,
                                                   const unsigned char *input,
                                                   size_t input_len);

SignalFfiError *signal_session_record_deserialize(SessionRecord **p,
                                                  const unsigned char *data,
                                                  size_t data_len);

SignalFfiError *signal_session_record_serialize(const SessionRecord *obj,
                                                const unsigned char **out,
                                                size_t *out_len);

SignalFfiError *signal_session_record_destroy(SessionRecord *p);

SignalFfiError *signal_fingerprint_format(const char **fprint,
                                          const unsigned char *local,
                                          size_t local_len,
                                          const unsigned char *remote,
                                          size_t remote_len);

SignalFfiError *signal_fingerprint_new(Fingerprint **obj,
                                       unsigned int iterations,
                                       unsigned int version,
                                       const unsigned char *local_identifier,
                                       size_t local_identifier_len,
                                       const PublicKey *local_key,
                                       const unsigned char *remote_identifier,
                                       size_t remote_identifier_len,
                                       const PublicKey *remote_key);

SignalFfiError *signal_fingerprint_destroy(Fingerprint *p);

SignalFfiError *signal_fingerprint_display_string(const Fingerprint *obj, const char **out);

SignalFfiError *signal_fingerprint_scannable_encoding(const Fingerprint *obj,
                                                      const unsigned char **out,
                                                      size_t *out_len);

SignalFfiError *signal_fingerprint_compare(unsigned char *result,
                                           const unsigned char *fprint1,
                                           size_t fprint1_len,
                                           const unsigned char *fprint2,
                                           size_t fprint2_len);

SignalFfiError *signal_message_deserialize(SignalMessage **p,
                                           const unsigned char *data,
                                           size_t data_len);

SignalFfiError *signal_message_new(SignalMessage **obj,
                                   unsigned char message_version,
                                   const unsigned char *mac_key,
                                   size_t mac_key_len,
                                   const PublicKey *sender_ratchet_key,
                                   unsigned int counter,
                                   unsigned int previous_counter,
                                   const unsigned char *ciphertext,
                                   size_t ciphertext_len,
                                   const PublicKey *sender_identity_key,
                                   const PublicKey *receiver_identity_key);

SignalFfiError *signal_message_destroy(SignalMessage *p);

SignalFfiError *signal_message_get_sender_ratchet_key(PublicKey **new_obj,
                                                      const SignalMessage *obj);

SignalFfiError *signal_message_get_body(const SignalMessage *obj,
                                        const unsigned char **out,
                                        size_t *out_len);

SignalFfiError *signal_message_get_serialized(const SignalMessage *obj,
                                              const unsigned char **out,
                                              size_t *out_len);

SignalFfiError *signal_message_get_message_version(const SignalMessage *obj, unsigned int *out);

SignalFfiError *signal_message_get_counter(const SignalMessage *obj, unsigned int *out);

SignalFfiError *signal_message_verify_mac(unsigned int *result,
                                          const SignalMessage *handle,
                                          const PublicKey *sender_identity_key,
                                          const PublicKey *receiver_identity_key,
                                          const unsigned char *mac_key,
                                          size_t mac_key_len);

SignalFfiError *signal_pre_key_signal_message_deserialize(PreKeySignalMessage **p,
                                                          const unsigned char *data,
                                                          size_t data_len);

SignalFfiError *signal_pre_key_signal_message_new(PreKeySignalMessage **obj,
                                                  unsigned char message_version,
                                                  unsigned int registration_id,
                                                  const unsigned int *pre_key_id,
                                                  unsigned int signed_pre_key_id,
                                                  const PublicKey *base_key,
                                                  const PublicKey *identity_key,
                                                  const SignalMessage *signal_message);

SignalFfiError *signal_pre_key_signal_message_destroy(PreKeySignalMessage *p);

SignalFfiError *signal_pre_key_signal_message_get_version(const PreKeySignalMessage *obj,
                                                          unsigned int *out);

SignalFfiError *signal_pre_key_signal_message_get_registration_id(const PreKeySignalMessage *obj,
                                                                  unsigned int *out);

SignalFfiError *signal_pre_key_signal_message_get_pre_key_id(const PreKeySignalMessage *obj,
                                                             unsigned int *out);

SignalFfiError *signal_pre_key_signal_message_get_signed_pre_key_id(const PreKeySignalMessage *obj,
                                                                    unsigned int *out);

SignalFfiError *signal_pre_key_signal_message_get_base_key(PublicKey **new_obj,
                                                           const PreKeySignalMessage *obj);

SignalFfiError *signal_pre_key_signal_message_get_identity_key(PublicKey **new_obj,
                                                               const PreKeySignalMessage *obj);

SignalFfiError *signal_pre_key_signal_message_get_signal_message(SignalMessage **new_obj,
                                                                 const PreKeySignalMessage *obj);

SignalFfiError *signal_pre_key_signal_message_serialize(const PreKeySignalMessage *obj,
                                                        const unsigned char **out,
                                                        size_t *out_len);

SignalFfiError *signal_sender_key_message_new(SenderKeyMessage **obj,
                                              unsigned int key_id,
                                              unsigned int iteration,
                                              const unsigned char *ciphertext,
                                              size_t ciphertext_len,
                                              const PrivateKey *pk);

SignalFfiError *signal_sender_key_message_deserialize(SenderKeyMessage **p,
                                                      const unsigned char *data,
                                                      size_t data_len);

SignalFfiError *signal_sender_key_message_destroy(SenderKeyMessage *p);

SignalFfiError *signal_sender_key_message_get_key_id(const SenderKeyMessage *obj,
                                                     unsigned int *out);

SignalFfiError *signal_sender_key_message_get_iteration(const SenderKeyMessage *obj,
                                                        unsigned int *out);

SignalFfiError *signal_sender_key_message_get_cipher_text(const SenderKeyMessage *obj,
                                                          const unsigned char **out,
                                                          size_t *out_len);

SignalFfiError *signal_sender_key_message_serialize(const SenderKeyMessage *obj,
                                                    const unsigned char **out,
                                                    size_t *out_len);

SignalFfiError *signal_sender_key_message_verify_signature(unsigned int *result,
                                                           const SenderKeyMessage *skm,
                                                           const PublicKey *pubkey);

SignalFfiError *signal_sender_key_distribution_message_new(SenderKeyDistributionMessage **obj,
                                                           unsigned int key_id,
                                                           unsigned int iteration,
                                                           const unsigned char *chainkey,
                                                           size_t chainkey_len,
                                                           const PublicKey *pk);

SignalFfiError *signal_sender_key_distribution_message_deserialize(SenderKeyDistributionMessage **p,
                                                                   const unsigned char *data,
                                                                   size_t data_len);

SignalFfiError *signal_sender_key_distribution_message_destroy(SenderKeyDistributionMessage *p);

SignalFfiError *signal_sender_key_distribution_message_get_id(const SenderKeyDistributionMessage *obj,
                                                              unsigned int *out);

SignalFfiError *signal_sender_key_distribution_message_get_iteration(const SenderKeyDistributionMessage *obj,
                                                                     unsigned int *out);

SignalFfiError *signal_sender_key_distribution_message_get_chain_key(const SenderKeyDistributionMessage *obj,
                                                                     const unsigned char **out,
                                                                     size_t *out_len);

SignalFfiError *signal_sender_key_distribution_message_get_signature_key(PublicKey **new_obj,
                                                                         const SenderKeyDistributionMessage *obj);

SignalFfiError *signal_sender_key_distribution_message_serialize(const SenderKeyDistributionMessage *obj,
                                                                 const unsigned char **out,
                                                                 size_t *out_len);

SignalFfiError *signal_pre_key_bundle_new(PreKeyBundle **obj,
                                          unsigned int registration_id,
                                          unsigned int device_id,
                                          const unsigned int *prekey_id,
                                          const PublicKey *prekey,
                                          unsigned int signed_prekey_id,
                                          const PublicKey *signed_prekey,
                                          const unsigned char *signed_prekey_signature,
                                          size_t signed_prekey_signature_len,
                                          const PublicKey *identity_key);

SignalFfiError *signal_pre_key_bundle_destroy(PreKeyBundle *p);

SignalFfiError *signal_pre_key_bundle_get_registration_id(const PreKeyBundle *obj,
                                                          unsigned int *out);

SignalFfiError *signal_pre_key_bundle_get_device_id(const PreKeyBundle *obj, unsigned int *out);

SignalFfiError *signal_pre_key_bundle_get_signed_pre_key_id(const PreKeyBundle *obj,
                                                            unsigned int *out);

SignalFfiError *signal_pre_key_bundle_get_pre_key_id(const PreKeyBundle *obj, unsigned int *out);

SignalFfiError *signal_pre_key_bundle_get_pre_key_public(PublicKey **new_obj,
                                                         const PreKeyBundle *obj);

SignalFfiError *signal_pre_key_bundle_get_signed_pre_key_public(PublicKey **new_obj,
                                                                const PreKeyBundle *obj);

SignalFfiError *signal_pre_key_bundle_get_identity_key(PublicKey **new_obj,
                                                       const PreKeyBundle *obj);

SignalFfiError *signal_pre_key_bundle_get_signed_pre_key_signature(const PreKeyBundle *obj,
                                                                   const unsigned char **out,
                                                                   size_t *out_len);

SignalFfiError *signal_signed_pre_key_record_new(SignedPreKeyRecord **obj,
                                                 unsigned int id,
                                                 unsigned long long timestamp,
                                                 const PublicKey *pub_key,
                                                 const PrivateKey *priv_key,
                                                 const unsigned char *signature,
                                                 size_t signature_len);

SignalFfiError *signal_signed_pre_key_record_deserialize(SignedPreKeyRecord **p,
                                                         const unsigned char *data,
                                                         size_t data_len);

SignalFfiError *signal_signed_pre_key_record_get_id(const SignedPreKeyRecord *obj,
                                                    unsigned int *out);

SignalFfiError *signal_signed_pre_key_record_get_timestamp(const SignedPreKeyRecord *obj,
                                                           unsigned long long *out);

SignalFfiError *signal_signed_pre_key_record_get_public_key(PublicKey **new_obj,
                                                            const SignedPreKeyRecord *obj);

SignalFfiError *signal_signed_pre_key_record_get_private_key(PrivateKey **new_obj,
                                                             const SignedPreKeyRecord *obj);

SignalFfiError *signal_signed_pre_key_record_get_signature(const SignedPreKeyRecord *obj,
                                                           const unsigned char **out,
                                                           size_t *out_len);

SignalFfiError *signal_signed_pre_key_record_serialize(const SignedPreKeyRecord *obj,
                                                       const unsigned char **out,
                                                       size_t *out_len);

SignalFfiError *signal_signed_pre_key_record_destroy(SignedPreKeyRecord *p);

SignalFfiError *signal_pre_key_record_new(PreKeyRecord **obj,
                                          unsigned int id,
                                          const PublicKey *pub_key,
                                          const PrivateKey *priv_key);

SignalFfiError *signal_pre_key_record_deserialize(PreKeyRecord **p,
                                                  const unsigned char *data,
                                                  size_t data_len);

SignalFfiError *signal_pre_key_record_get_id(const PreKeyRecord *obj, unsigned int *out);

SignalFfiError *signal_pre_key_record_get_public_key(PublicKey **new_obj, const PreKeyRecord *obj);

SignalFfiError *signal_pre_key_record_get_private_key(PrivateKey **new_obj,
                                                      const PreKeyRecord *obj);

SignalFfiError *signal_pre_key_record_serialize(const PreKeyRecord *obj,
                                                const unsigned char **out,
                                                size_t *out_len);

SignalFfiError *signal_pre_key_record_destroy(PreKeyRecord *p);

SignalFfiError *signal_sender_key_name_new(SenderKeyName **obj,
                                           const char *group_id,
                                           const char *sender_name,
                                           unsigned int sender_device_id);

SignalFfiError *signal_sender_key_name_destroy(SenderKeyName *p);

SignalFfiError *signal_sender_key_name_get_group_id(const SenderKeyName *obj, const char **out);

SignalFfiError *signal_sender_key_name_get_sender_name(const SenderKeyName *obj, const char **out);

SignalFfiError *signal_sender_key_name_get_sender_device_id(const SenderKeyName *obj,
                                                            unsigned int *out);

SignalFfiError *signal_sender_key_record_new_fresh(SenderKeyRecord **obj);

SignalFfiError *signal_sender_key_record_destroy(SenderKeyRecord *p);

SignalFfiError *signal_sender_key_record_deserialize(SenderKeyRecord **p,
                                                     const unsigned char *data,
                                                     size_t data_len);

SignalFfiError *signal_sender_key_record_serialize(const SenderKeyRecord *obj,
                                                   const unsigned char **out,
                                                   size_t *out_len);

SignalFfiError *signal_process_prekey_bundle(PreKeyBundle *bundle,
                                             const ProtocolAddress *protocol_address,
                                             FfiSessionStoreStruct *session_store,
                                             FfiIdentityKeyStoreStruct *identity_key_store,
                                             void *ctx);

SignalFfiError *signal_encrypt_message(const unsigned char **result,
                                       size_t *result_len,
                                       const unsigned char *ptext,
                                       size_t ptext_len,
                                       const ProtocolAddress *protocol_address,
                                       FfiSessionStoreStruct *session_store,
                                       FfiIdentityKeyStoreStruct *identity_key_store,
                                       void *ctx);

SignalFfiError *signal_decrypt_message(const unsigned char **result,
                                       size_t *result_len,
                                       const SignalMessage *message,
                                       const ProtocolAddress *protocol_address,
                                       FfiSessionStoreStruct *session_store,
                                       FfiIdentityKeyStoreStruct *identity_key_store,
                                       void *ctx);

SignalFfiError *signal_decrypt_pre_key_message(const unsigned char **result,
                                               size_t *result_len,
                                               const PreKeySignalMessage *message,
                                               const ProtocolAddress *protocol_address,
                                               FfiSessionStoreStruct *session_store,
                                               FfiIdentityKeyStoreStruct *identity_key_store,
                                               FfiPreKeyStoreStruct *prekey_store,
                                               FfiSignedPreKeyStoreStruct *signed_prekey_store,
                                               void *ctx);

SignalFfiError *signal_create_sender_key_distribution_message(SenderKeyDistributionMessage **obj,
                                                              const SenderKeyName *sender_key_name,
                                                              FfiSenderKeyStoreStruct *store,
                                                              void *ctx);

SignalFfiError *signal_process_sender_key_distribution_message(const SenderKeyName *sender_key_name,
                                                               const SenderKeyDistributionMessage *sender_key_distribution_message,
                                                               FfiSenderKeyStoreStruct *store,
                                                               void *ctx);

SignalFfiError *signal_group_encrypt_message(const unsigned char **out,
                                             size_t *out_len,
                                             const SenderKeyName *sender_key_name,
                                             const unsigned char *message,
                                             size_t message_len,
                                             FfiSenderKeyStoreStruct *store,
                                             void *ctx);

SignalFfiError *signal_group_decrypt_message(const unsigned char **out,
                                             size_t *out_len,
                                             const SenderKeyName *sender_key_name,
                                             const unsigned char *message,
                                             size_t message_len,
                                             FfiSenderKeyStoreStruct *store,
                                             void *ctx);

#endif /* SIGNAL_FFI_H_ */
